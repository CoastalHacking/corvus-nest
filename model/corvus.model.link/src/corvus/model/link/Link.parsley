import corvus.resource.ResourceEmfParsleyGuiceModule
import org.eclipse.emf.parsley.runtime.ui.PluginUtil
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.common.notify.AdapterFactory

module corvus.model.link extends ResourceEmfParsleyGuiceModule {

	configurator {
		resourceURI {
			// Uses XMI via dependency
			Object -> {
				val bc = PluginUtil.getBundle(LinkActivator).bundleContext
				val file = bc.getBundle().getDataFile("corvus.model.link")
				URI.createFileURI(file.getAbsolutePath())
			}
		}
	}

	resourceManager {
		
		// Load the package into the global package registry
		// TODO: consider injecting?
		var LinkPackage package = LinkPackage.eINSTANCE

		var LinkFactory factory = LinkFactory.eINSTANCE

		initializeResource {
			// first add to the resource
			var LinkContainer linkContainer = factory.createLinkContainer
			it.contents += linkContainer

			// then add the state for notification purpose
			// could move the below to a resource set change listener
			var State state = factory.createState
			linkContainer.state = state
		}
	}

	bindings {
		// Use the model's provider
		type AdapterFactory -> InjectedLinkAdapterFactory
	}
}
